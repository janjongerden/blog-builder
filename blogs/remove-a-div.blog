title=Removing a div with Greasemonkey
date=2020-04-01
tags=html,hacks
description=How to remove an unwanted HTML element from a webpage using Greasemonkey.
--content

To get rid of minor annoyances in your favorite websites, you can use Greasemonkey
to tweak html where needed. The <code>hide image</code> and <code>ALT</code> buttons on Mastodon images
are such an annoyance - I rarely need these buttons, but they do interfere with images.
Text in images may become unreadable, like in the messages from
<a href="https://mas.to/@skeletor">inspirational Skeletor</a>:


<img src="img/skeletor_obfuscated.png" alt="Skeletor image with unreadable text">

<br/>
<br/>
<h2>greasemonkey</h2>

Greasemonkey is an add-on for
 Firefox that allows a user to add custom behaviour to pages by creating
scripts that run on page load and can modify the html, css or javascript on
a page. For Chrome <a href="https://tampermonkey.net/">Tampermonkey</a> will
do the same. To get Greasemonkey running, get it 
<a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/">here</a>
 and restart your browser. You will now see a little monkey head in the
top right corner of your browser. You can install the script below by opening
<a href="js/mastodon-image-liberator.user.js">this link to the script</a> in your browser.
Alternatively you can click the monkey's head and
choose <code>New user script...</code>. Fill out the required fields and then paste the
script content below in the edit window (by default pasting is disabled in the editor,
so you may have to enable this first).
<br />
<br />
The Greasemonkey script that will hide the buttons:

<pre><code class="prettyprint">// ==UserScript==
// @name         Mastodon Image Liberator
// @namespace    janjongerden.nl
// @version      1.0
// @description  Hide the buttons on top of images
// @author       Jan Jongerden
// @include      https://mas.to/*
// @grant        none
// ==/UserScript==

const cleanButtons = () => {
    const hideButtons = document.querySelectorAll('.media-gallery__actions__pill');

    hideButtons.forEach(element => {
        element.style.display = 'none';
    });

    const altButtons = document.querySelectorAll('.media-gallery__item__badges');

    altButtons.forEach(element => {
        element.style.bottom = '-9px';
    });
};

var repeater = setInterval(cleanButtons, 1000);
</code></pre>

The script is run on page load, for all urls starting with <code>https://mas.to/</code> and
hides the buttons. The <code>hide image</code> button is removed completely and
the <code>ALT</code> button is only pushed down a bit, as I do find it useful occasionally.
The procedure is repeated every second, as new images are loaded on the fly as you
scroll down your message feed.
Of all Greasemonkey annotations in the header, the most interesting part is the
<code>@include</code>, which states on which pages the script should run. If your home
is a different Mastodon instance, you should adjust this accordingly. You can check
<a href="https://wiki.greasespot.net/Metadata_Block">the API reference</a> to learn
more about the other tags. The syntax of the body of the user script is just plain javascript.
<br />
<br />
When installed, the image is cleaned up, and Skeletor's piece of wisdom can be enjoyed:

<img src="img/skeletor_cleaned.png" alt="Skeletor image with readable text">

<h2>the mobile story</h2>
For mobile a slightly different approach is needed: the Greasemonkey add-on is not yet
available for Firefox on Android as far as I can tell. However, there is an 
alternative extension, the
<a href="https://addons.mozilla.org/en-us/firefox/addon/userunified-script-injector/">
Unified Script Injector (USI)</a>. Even though the extension
claims to have only limited support for Greasemonkey scripts, it did the job
for this simple script. Once you have installed the extension, you can add new
user scripts by going to the FireFox menu, open <strong>Extensions</strong> -> <strong>USI</strong>, choose
<strong>'create new userscript'</strong> and paste the content of
<a href="js/mastodon-image-liberator.user.js">the user script</a>. I'm sure similar solutions are available for
other mobile browsers, but I haven't tried this myself.

<br />
<br />

<h2>caveats</h2>

Greasemonkey scripts are inherently fragile as small changes in the target page could break your script.
When a css class is renamed or the html structure is changed, you may have to update the logic in your
script. Another issue is modifying elements that accidentally match your filter, like removing other buttons
with the same css class, which could break the layout or functionality of the page.
<br />
<br />
